// Copyright 2021 Proyectos y Sistemas de Mantenimiento SL (eProsima).
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

/*!
 * @file LoanableHelloWorldSubscriber.h
 * This header file contains the declaration of the subscriber functions.
 *
 * This file was generated by the tool fastcdrgen.
 */


#ifndef _LOANABLEHELLOWORLD_SUBSCRIBER_H_
#define _LOANABLEHELLOWORLD_SUBSCRIBER_H_

#include <fastdds/dds/domain/DomainParticipant.hpp>
#include <fastdds/dds/subscriber/DataReader.hpp>
#include <fastdds/dds/subscriber/DataReaderListener.hpp>
#include <fastdds/dds/subscriber/Subscriber.hpp>
#include <fastdds/dds/core/condition/WaitSet.hpp>
#include <fastdds/dds/core/condition/GuardCondition.hpp>

class LoanableHelloWorld;

class LoanableHelloWorldSubscriber
{
public:
    LoanableHelloWorldSubscriber();

    virtual ~LoanableHelloWorldSubscriber();

    bool init( bool use_copy = false, bool slow = false );

    void run();

private:
    void get_sample_safe(  );
    void get_sample(  );
    
    void process_sample(const LoanableHelloWorld& sample);

    eprosima::fastdds::dds::DomainParticipant * participant_;
    eprosima::fastdds::dds::Subscriber * subscriber_;
    eprosima::fastdds::dds::Topic * topic_;
    eprosima::fastdds::dds::DataReader * reader_;
    eprosima::fastdds::dds::TypeSupport type_;
    eprosima::fastdds::dds::GuardCondition terminate_condition_;

    bool _slow = false;
    bool _use_copy = false;
    std::thread _thread;
    uint32_t _samples = 0;

    class SubListener : public eprosima::fastdds::dds::DataReaderListener
    {
    public:
        SubListener() = default;

        ~SubListener() override = default;

        void on_subscription_matched(
            eprosima::fastdds::dds::DataReader * reader,
            const eprosima::fastdds::dds::SubscriptionMatchedStatus & info ) override;


        int matched = 0;
        uint32_t samples = 0;

    } listener_;
};

#endif  // _LOANABLEHELLOWORLD_SUBSCRIBER_H_