// Copyright 2021 Proyectos y Sistemas de Mantenimiento SL (eProsima).
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

/*!
 * @file LoanableHelloWorldPublisher.cpp
 * This file contains the implementation of the publisher functions.
 *
 * This file was generated by the tool fastcdrgen.
 */


#include "LoanableHelloWorldPublisher.h"
#include "LoanableHelloWorldPubSubTypes.h"

#include <fastdds/dds/domain/DomainParticipantFactory.hpp>
#include <fastdds/dds/publisher/Publisher.hpp>
#include <fastdds/dds/publisher/qos/PublisherQos.hpp>
#include <fastdds/dds/publisher/DataWriter.hpp>
#include <fastdds/dds/publisher/qos/DataWriterQos.hpp>

#include <thread>
#include <chrono>
#include <librealsense2/rs.hpp>

using namespace eprosima::fastdds::dds;

LoanableHelloWorldPublisher::LoanableHelloWorldPublisher()
    : participant_(nullptr)
    , publisher_(nullptr)
    , topic_(nullptr)
    , writer_(nullptr)
    , type_(new LoanableHelloWorldPubSubType())
{
}

LoanableHelloWorldPublisher::~LoanableHelloWorldPublisher()
{
    if (writer_ != nullptr)
    {
        publisher_->delete_datawriter(writer_);
    }
    if (publisher_ != nullptr)
    {
        participant_->delete_publisher(publisher_);
    }
    if (topic_ != nullptr)
    {
        participant_->delete_topic(topic_);
    }
    DomainParticipantFactory::get_instance()->delete_participant(participant_);
}

bool LoanableHelloWorldPublisher::init()
{
    /* Initialize data_ here */

    //CREATE THE PARTICIPANT
    DomainParticipantQos pqos;
    pqos.name("Participant_pub");
    participant_ = DomainParticipantFactory::get_instance()->create_participant(0, pqos);
    if (participant_ == nullptr)
    {
        return false;
    }

    //REGISTER THE TYPE
    type_.register_type(participant_);

    //CREATE THE PUBLISHER
    publisher_ = participant_->create_publisher(PUBLISHER_QOS_DEFAULT, nullptr);
    if (publisher_ == nullptr)
    {
        return false;
    }

    //CREATE THE TOPIC
    topic_ = participant_->create_topic(
        "RS_FRAME",
        type_.get_type_name(),
        TOPIC_QOS_DEFAULT);
    if (topic_ == nullptr)
    {
        return false;
    }

    // CREATE THE WRITER
    DataWriterQos wqos = publisher_->get_default_datawriter_qos();

    // The Subscriber receives samples from the moment it comes online, not before
    wqos.durability().kind = VOLATILE_DURABILITY_QOS;

    // The Publisher asks for arrival confirmation. Lost samples are re-sent
    wqos.reliability().kind = BEST_EFFORT_RELIABILITY_QOS;

    // Activate the use of DataSharing. Entity creation will fail if requirements for DataSharing are not met
    // The input shared memory folder can be changed into a specific folder but must be aligned with the readers
    wqos.data_sharing().on("");

    // The history keeps only the last 'depth' values
    // The 'depth' parameter of the History defines how many samples are stored before starting to overwrite them with newer ones.
    wqos.history().kind = KEEP_LAST_HISTORY_QOS;
    wqos.history().depth = 1;

    // Preallocate samples pool for receiving balanced real-time behaviour
    wqos.endpoint().history_memory_policy = eprosima::fastrtps::rtps::PREALLOCATED_MEMORY_MODE;

    // Synchronous publication mode
    wqos.publish_mode().kind = SYNCHRONOUS_PUBLISH_MODE;

    // Strict samples pre-alocated pool to minimum size needed
    wqos.resource_limits().max_samples = 1;
    wqos.resource_limits().allocated_samples = 1;
    
    writer_ = publisher_->create_datawriter(topic_, wqos, &listener_);
    if (writer_ == nullptr)
    {
        return false;
    }

    std::cout << "LoanableHelloWorld DataWriter created." << std::endl;
    return true;
}

void LoanableHelloWorldPublisher::PubListener::on_publication_matched(
        eprosima::fastdds::dds::DataWriter*,
        const eprosima::fastdds::dds::PublicationMatchedStatus& info)
{
    if (info.current_count_change == 1)
    {
        matched = info.current_count;
        std::cout << "DataWriter matched.total = " << matched << std::endl;
    }
    else if (info.current_count_change == -1)
    {
        matched = info.current_count;
        std::cout << "DataWriter unmatched. total = " << matched << std::endl;
    }
    else
    {
        std::cout << info.current_count_change
                  << " is not a valid value for PublicationMatchedStatus current count change" << std::endl;
    }
}

void LoanableHelloWorldPublisher::run()
{
    std::cout << "LoanableHelloWorld DataWriter waiting for DataReaders." << std::endl;
    while (listener_.matched == 0)
    {
        std::this_thread::sleep_for(std::chrono::milliseconds(250)); // Sleep 250 ms
    }

    int msgsent = 0;
    auto sleep_time = 33;

    rs2::config cfg;
    cfg.enable_stream(RS2_STREAM_COLOR);
    rs2::pipeline p;
    //p.start(cfg);

    do
    {
            //auto f = p.wait_for_frames();
            void* sample = nullptr;
            if (ReturnCode_t::RETCODE_OK == writer_->loan_sample(sample))
            {
                std::cout << "Preparing sample at address " << sample << std::endl;
                LoanableHelloWorld* data = static_cast<LoanableHelloWorld*>(sample);
                data->index() = msgsent++;
		        std::string HiString = "LoanableHelloWorld";
                //auto color_frame = f.get_color_frame();
                //auto h = color_frame.get_height();
                //auto w = color_frame.get_width();
                //std::cout << "dim is: " << w << " x " << h << " size is: " << color_frame.get_data_size() << " [bytes]" << std::endl;
                //memcpy(&data->data(), color_frame.get_data(), color_frame.get_data_size());
                using namespace std::chrono; 
	            auto time_now_us =  duration_cast< microseconds >( system_clock::now().time_since_epoch()).count();
                
                data->publish_time(time_now_us);
                std::cout << "Message: " << HiString << " with index: " << data->index() << " SENT" << std::endl;
                writer_->write(sample);
            }
            
            std::this_thread::sleep_for(std::chrono::milliseconds(33));
    } while (listener_.matched != 0 /*msgsent++ < 50*/);
}
