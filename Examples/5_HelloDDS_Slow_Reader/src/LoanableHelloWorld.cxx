// Copyright 2016 Proyectos y Sistemas de Mantenimiento SL (eProsima).
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

/*!
 * @file LoanableHelloWorld.cpp
 * This source file contains the definition of the described types in the IDL file.
 *
 * This file was generated by the tool gen.
 */

#ifdef _WIN32
// Remove linker warning LNK4221 on Visual Studio
namespace {
char dummy;
}  // namespace
#endif  // _WIN32

#include "LoanableHelloWorld.h"
#include <fastcdr/Cdr.h>

#include <fastcdr/exceptions/BadParamException.h>
using namespace eprosima::fastcdr::exception;

#include <utility>

LoanableHelloWorld::LoanableHelloWorld()
{
    // m_index com.eprosima.idl.parser.typecode.PrimitiveTypeCode@49fc609f
    m_index = 0;
    // m_data com.eprosima.idl.parser.typecode.ArrayTypeCode@cd2dae5
    memset(&m_data, 0, (1280*720*3) * 1);
    // m_publish_time com.eprosima.idl.parser.typecode.PrimitiveTypeCode@3a883ce7
    m_publish_time = 0;

}

LoanableHelloWorld::~LoanableHelloWorld()
{



}

LoanableHelloWorld::LoanableHelloWorld(
        const LoanableHelloWorld& x)
{
    m_index = x.m_index;
    m_data = x.m_data;
    m_publish_time = x.m_publish_time;
}

LoanableHelloWorld::LoanableHelloWorld(
        LoanableHelloWorld&& x)
{
    m_index = x.m_index;
    m_data = std::move(x.m_data);
    m_publish_time = x.m_publish_time;
}

LoanableHelloWorld& LoanableHelloWorld::operator =(
        const LoanableHelloWorld& x)
{

    m_index = x.m_index;
    m_data = x.m_data;
    m_publish_time = x.m_publish_time;

    return *this;
}

LoanableHelloWorld& LoanableHelloWorld::operator =(
        LoanableHelloWorld&& x)
{

    m_index = x.m_index;
    m_data = std::move(x.m_data);
    m_publish_time = x.m_publish_time;

    return *this;
}

size_t LoanableHelloWorld::getMaxCdrSerializedSize(
        size_t current_alignment)
{
    size_t initial_alignment = current_alignment;


    current_alignment += 4 + eprosima::fastcdr::Cdr::alignment(current_alignment, 4);


    current_alignment += ((1280*720*3) * 1) + eprosima::fastcdr::Cdr::alignment(current_alignment, 1);


    current_alignment += 8 + eprosima::fastcdr::Cdr::alignment(current_alignment, 8);



    return current_alignment - initial_alignment;
}

size_t LoanableHelloWorld::getCdrSerializedSize(
        const LoanableHelloWorld& data,
        size_t current_alignment)
{
    (void)data;
    size_t initial_alignment = current_alignment;


    current_alignment += 4 + eprosima::fastcdr::Cdr::alignment(current_alignment, 4);


    if ((1280*720*3) > 0)
    {
        current_alignment += ((1280*720*3) * 1) + eprosima::fastcdr::Cdr::alignment(current_alignment, 1);
    }

    current_alignment += 8 + eprosima::fastcdr::Cdr::alignment(current_alignment, 8);



    return current_alignment - initial_alignment;
}

void LoanableHelloWorld::serialize(
        eprosima::fastcdr::Cdr& scdr) const
{

    scdr << m_index;
    scdr << m_data;

    scdr << m_publish_time;

}

void LoanableHelloWorld::deserialize(
        eprosima::fastcdr::Cdr& dcdr)
{

    dcdr >> m_index;
    dcdr >> m_data;

    dcdr >> m_publish_time;
}

/*!
 * @brief This function sets a value in member index
 * @param _index New value for member index
 */
void LoanableHelloWorld::index(
        uint32_t _index)
{
    m_index = _index;
}

/*!
 * @brief This function returns the value of member index
 * @return Value of member index
 */
uint32_t LoanableHelloWorld::index() const
{
    return m_index;
}

/*!
 * @brief This function returns a reference to member index
 * @return Reference to member index
 */
uint32_t& LoanableHelloWorld::index()
{
    return m_index;
}

/*!
 * @brief This function copies the value in member data
 * @param _data New value to be copied in member data
 */
void LoanableHelloWorld::data(
        const std::array<char, 1280*720*3>& _data)
{
    m_data = _data;
}

/*!
 * @brief This function moves the value in member data
 * @param _data New value to be moved in member data
 */
void LoanableHelloWorld::data(
        std::array<char, 1280*720*3>&& _data)
{
    m_data = std::move(_data);
}

/*!
 * @brief This function returns a constant reference to member data
 * @return Constant reference to member data
 */
const std::array<char, 1280*720*3>& LoanableHelloWorld::data() const
{
    return m_data;
}

/*!
 * @brief This function returns a reference to member data
 * @return Reference to member data
 */
std::array<char, 1280*720*3>& LoanableHelloWorld::data()
{
    return m_data;
}
/*!
 * @brief This function sets a value in member publish_time
 * @param _publish_time New value for member publish_time
 */
void LoanableHelloWorld::publish_time(
        int64_t _publish_time)
{
    m_publish_time = _publish_time;
}

/*!
 * @brief This function returns the value of member publish_time
 * @return Value of member publish_time
 */
int64_t LoanableHelloWorld::publish_time() const
{
    return m_publish_time;
}

/*!
 * @brief This function returns a reference to member publish_time
 * @return Reference to member publish_time
 */
int64_t& LoanableHelloWorld::publish_time()
{
    return m_publish_time;
}


size_t LoanableHelloWorld::getKeyMaxCdrSerializedSize(
        size_t current_alignment)
{
    size_t current_align = current_alignment;






    return current_align;
}

bool LoanableHelloWorld::isKeyDefined()
{
    return false;
}

void LoanableHelloWorld::serializeKey(
        eprosima::fastcdr::Cdr& scdr) const
{
    (void) scdr;
       
}
