// Copyright 2021 Proyectos y Sistemas de Mantenimiento SL (eProsima).
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

/*!
 * @file LoanableHelloWorldSubscriber.cpp
 * This file contains the implementation of the subscriber functions.
 *
 * This file was generated by the tool fastcdrgen.
 */

#include <fastdds/dds/domain/DomainParticipantFactory.hpp>
#include <fastdds/dds/subscriber/DataReader.hpp>
#include <fastdds/dds/subscriber/SampleInfo.hpp>
#include <fastdds/dds/subscriber/Subscriber.hpp>
#include <fastdds/dds/subscriber/qos/DataReaderQos.hpp>

#include "LoanableHelloWorldSubscriber.h"
#include "LoanableHelloWorldPubSubTypes.h"

using namespace eprosima::fastdds::dds;

LoanableHelloWorldSubscriber::LoanableHelloWorldSubscriber()
    : participant_(nullptr)
    , subscriber_(nullptr)
    , topic_(nullptr)
    , reader_(nullptr)
    , type_(new LoanableHelloWorldPubSubType())
{
}

LoanableHelloWorldSubscriber::~LoanableHelloWorldSubscriber()
{
    if (reader_ != nullptr)
    {
        subscriber_->delete_datareader(reader_);
    }
    if (topic_ != nullptr)
    {
        participant_->delete_topic(topic_);
    }
    if (subscriber_ != nullptr)
    {
        participant_->delete_subscriber(subscriber_);
    }
    DomainParticipantFactory::get_instance()->delete_participant(participant_);
}

bool LoanableHelloWorldSubscriber::init( bool slow )
{
    if (slow)
    {
        listener_.set_slow_speed();
    }
    
    //CREATE THE PARTICIPANT
    DomainParticipantQos pqos;
    pqos.name("Participant_sub");

    // Indicates for how much time should a remote DomainParticipant consider the local DomainParticipant to be alive. 
    // If the liveliness of the local DomainParticipant has not being asserted within this time, 
    // the remote DomainParticipant considers the local DomainParticipant dead and destroys all the information regarding the local DomainParticipant and all its endpoints.
    pqos.wire_protocol().builtin.discovery_config.leaseDuration = { 10, 0 }; //[sec, nsec]

    participant_ = DomainParticipantFactory::get_instance()->create_participant(0, pqos);
    if (participant_ == nullptr)
    {
        return false;
    }

    //REGISTER THE TYPE
    type_.register_type(participant_);

    //CREATE THE SUBSCRIBER
    subscriber_ = participant_->create_subscriber(SUBSCRIBER_QOS_DEFAULT, nullptr);
    if (subscriber_ == nullptr)
    {
        return false;
    }

    //CREATE THE TOPIC
    topic_ = participant_->create_topic(
        "RS_FRAME",
        type_.get_type_name(),
        TOPIC_QOS_DEFAULT);
    if (topic_ == nullptr)
    {
        return false;
    }

    //CREATE THE READER
    DataReaderQos rqos = subscriber_->get_default_datareader_qos();
    
    //The 'depth' parameter of the History defines how many samples are stored before starting to overwrite them with newer ones.
    rqos.history().kind = KEEP_LAST_HISTORY_QOS;
    rqos.history().depth = 1;
    
    // We use "RELIABLE_RELIABILITY_QOS" for making sure that the writer will only get a new sample slot
    // If the reader is not reading it.
    //rqos.reliability().kind = RELIABLE_RELIABILITY_QOS;
    rqos.reliability().kind = BEST_EFFORT_RELIABILITY_QOS;
    
    // The Subscriber receives samples from the moment it comes online, not before
    rqos.durability().kind = VOLATILE_DURABILITY_QOS;

    // Activate the use of DataSharing. Entity creation will fail if requirements for DataSharing are not met
    // The input shared memory folder can be changed into a specific folder but must be aligned with the readers
    rqos.data_sharing().on("");

    // Strict samples pre-alocated pool to minimum size needed
    rqos.resource_limits().max_samples = 1;
    //rqos.resource_limits().allocated_samples = 1;
    rqos.resource_limits().extra_samples = 0;

    reader_ = subscriber_->create_datareader(topic_, rqos, &listener_);
    if (reader_ == nullptr)
    {
        return false;
    }

    return true;
}

void LoanableHelloWorldSubscriber::SubListener::on_subscription_matched(
        DataReader*,
        const SubscriptionMatchedStatus& info)
{
    if (info.current_count_change == 1)
    {
        matched = info.total_count;
        std::cout << "Subscriber matched." << std::endl;
    }
    else if (info.current_count_change == -1)
    {
        matched = info.total_count;
        std::cout << "Subscriber unmatched." << std::endl;
    }
    else
    {
        std::cout << info.current_count_change
                  << " is not a valid value for SubscriptionMatchedStatus current count change" << std::endl;
    }
}

void LoanableHelloWorldSubscriber::SubListener::on_data_available(
        DataReader* reader)
{
    FASTDDS_SEQUENCE(DataSeq, LoanableHelloWorld);

    DataSeq data;
    SampleInfoSeq infos;
    while (ReturnCode_t::RETCODE_OK == reader->take(data, infos))
    {
        for (LoanableCollection::size_type i = 0; i < infos.length(); ++i)
        {
            if (infos[i].valid_data)
            {
                // `is_sample_valid()` return always false - BUG on FastDDS
                //if (!reader->is_sample_valid(&data[0], &infos[0]))
                //{
                //    std::cout << "Sample is not valid!" << std::endl;
                //}
                // Print your structure data here.
                const LoanableHelloWorld& sample = data[i];
                
                ++samples;
                using namespace std::chrono;
                auto time_now_us =  duration_cast< microseconds >( system_clock::now().time_since_epoch()).count();
                std::cout << (_slow ? "Slow " : "") << "Sample received (count=" << samples << ") at address " << &sample.data() 
                            << "  index=" << sample.index() 
                            << " Time Since Published: " << (time_now_us - sample.publish_time()) << " [us]"
                            << std::endl;
                auto slot = sample.data()[0];
                std::this_thread::sleep_for(std::chrono::milliseconds(40));
                for (int j = 1 ; j < 1000; ++j)
                    if (sample.data()[j] != slot)
                    {
                        std::cout << "corrupted data found at slot: " << j << ", expected: " << (int)slot << " got: " << (int)sample.data()[i] << std::endl;
                        //std::this_thread::sleep_for(std::chrono::seconds(10));
                    }
            }
        }
        if ( _slow )
            std::this_thread::sleep_for(std::chrono::seconds(1));

        reader->return_loan(data, infos);        
    }
}

void LoanableHelloWorldSubscriber::run()
{
    std::cout << "Waiting for Data, press Enter to stop the DataReader. " << std::endl;
    std::cin.ignore();
    std::cout << "Shutting down the Subscriber." << std::endl;
}
